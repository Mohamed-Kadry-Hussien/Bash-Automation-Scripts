#!/bin/bash

# Colors for better readability
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Timestamp for backup naming
TIMESTAMP=$(date +"%Y\%m\%d_%H:%M:%S")
BACKUP_NAME="backup_$TIMESTAMP.tar.gz"

# Function to get backup destination
get_backup_destination() {
    read -p "Enter backup destination: " BACKUP_DEST
    if [ -z "$BACKUP_DEST" ]; then
        echo -e "${RED}Backup destination is required.${NC}"
        exit 1
    fi
    mkdir -p "$BACKUP_DEST"
}

# Function to set up rclone
rclone_setup() {
    RCLONE_CONFIG_PATH="$HOME/.config/rclone/rclone.conf"
    SERVICE_ACCOUNT_FILE="famous-vista-450706-b7-ede8cbe7aa55.json"
    REMOTE_NAME="Backupkey"  
    mkdir -p "$(dirname "$RCLONE_CONFIG_PATH")"
    
    if [ ! -f "$SERVICE_ACCOUNT_FILE" ]; then
        echo -e "${RED}‚ö†Ô∏è ŸÖŸÑŸÅ $SERVICE_ACCOUNT_FILE ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ! ÿ™ÿ£ŸÉÿØ ŸÖŸÜ Ÿàÿ∂ÿπŸá ŸÅŸä ŸÜŸÅÿ≥ ŸÖÿ¨ŸÑÿØ ÿßŸÑÿ≥ŸÉÿ±Ÿäÿ®ÿ™.${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}üîÑ setup rclone automaticlly...${NC}"
    
    cat <<EOF > "$RCLONE_CONFIG_PATH"
[$REMOTE_NAME]
type = drive
scope = drive
service_account_file = $(pwd)/$SERVICE_ACCOUNT_FILE
EOF
    
    echo -e "${GREEN}‚úÖ U can sync to google drive.${NC}"
}

# Function to backup files
backup_files() {
    get_backup_destination
    read -rp "Enter source directories (comma-separated): " -a SOURCE_DIRS 
    mkdir -p "$BACKUP_DEST"
    
    echo -e "${BLUE}Creating backup archive...${NC}"
    tar -czf "$BACKUP_DEST/$BACKUP_NAME" "${SOURCE_DIRS[@]}" && echo -e "${GREEN}Backup created: $BACKUP_DEST/$BACKUP_NAME${NC}" || echo -e "${RED}Backup failed.${NC}"
    
    read -p "Sync to Google Drive? (y/n): " SYNC
    if [[ $SYNC == "y" ]]; then
        rclone_setup
        if command -v rclone &> /dev/null; then
            read -p "Enter your Google Drive folder name (e.g., backups): " GDRIVE_FOLDER
            echo "Uploading....."
            rclone copy "$BACKUP_DEST/$BACKUP_NAME" "Backupkey:$GDRIVE_FOLDER" && echo -e "${GREEN}Synced to Google Drive folder: $GDRIVE_FOLDER${NC}" || echo -e "${RED}Sync failed.${NC}"
            echo -e "${BLUE}This is your backup in Google Drive (visit the link):${NC}"
            rclone link Backupkey:$GDRIVE_FOLDER
        else
            echo -e "${RED}rclone is not installed. Please install rclone to sync to Google Drive.${NC}"
        fi
    fi
}

# Function to list backups
list_backups() {
    while true; do
        echo -e "${YELLOW}(Is this your backup destination (if you never entered it, say no): $BACKUP_DEST) (y/n)?${NC}"
        read x
        case $x in 
            y)
                echo -e "${BLUE}Available backups:${NC}"
                ls -lh "$BACKUP_DEST" | grep "backup_.*\.tar\.gz"
                break ;;
            n)
                read -p "Enter backup destination: " BACKUP_DEST
                echo -e "${BLUE}Available backups:${NC}"
                ls -lh "$BACKUP_DEST" | grep "backup_.*\.tar\.gz"
                break ;;
            *)
                echo -e "${RED}Invalid option. Please try again.${NC}" ;;
        esac
    done
}

# Function to restore a backup
restore_backup() {
    list_backups

    read -rp "Enter the backup file name to restore: " BACKUP_FILE
    RESTORE_DIR="$HOME/Desktop/Restored_Backup"  
    mkdir -p "$RESTORE_DIR"

    if [ -f "$BACKUP_DEST/$BACKUP_FILE" ]; then
        echo -e "${BLUE}Restoring backup: $BACKUP_FILE${NC}"
        tar -xzf "$BACKUP_DEST/$BACKUP_FILE" -C "$RESTORE_DIR"
        chown -R $USER:$USER "$RESTORE_DIR"  

        echo -e "${GREEN}‚úÖ Backup restored successfully! You will find it in: $RESTORE_DIR${NC}"
    else
        echo -e "${RED}‚ùå Backup file not found: $BACKUP_FILE${NC}"
    fi
}

# Main menu
while true; do
    echo -e "${BLUE}========================================${NC}"
    echo -e "${YELLOW}Backup and Recovery Tool${NC}"
    echo -e "${BLUE}========================================${NC}"
    echo -e "${GREEN}1. Backup files${NC}"
    echo -e "${GREEN}2. List backups${NC}"
    echo -e "${GREEN}3. Restore a backup${NC}"
    echo -e "${RED}4. Exit${NC}"
    echo -e "${BLUE}========================================${NC}"
    read -p "Choose an option: " OPTION

    case $OPTION in
        1) backup_files ;;
        2) list_backups ;;
        3) restore_backup ;;
        4) exit 0 ;;
        *) echo -e "${RED}Invalid option. Please try again.${NC}" ;;
    esac
    echo ""
done
